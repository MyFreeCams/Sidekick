; Script generated by the Inno Script Studio Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "Sidekick Installer"
#define SIDEKICK_VERSION_STR "@SIDEKICK_VERSION@"
#define SIDEKICK_BUILD_DATE "@SIDEKICK_BUILD_DATE@"
#define SIDEKICK_BUILD_DATETIME "@SIDEKICK_BUILD_DATETIME@"
#define MyAppPublisher "MyFreeCams"
#define MyAppCopyright "Copyright (c) 2019-@SIDEKICK_BUILD_YEAR@ MyFreeCams.com"
#define MyAppURL "https://www.myfreecams.com/"

;#define DirBuild64 "..\..\..\..\build64\plugins\MyFreeCams\Sidekick"
;#define DirMFCUpdater "..\..\..\..\build64\MFCUpdater"
;#define DirSidekick "..\..\..\..\build64\Sidekick"
;#define ObsInstallDir "{code:GetObsPath}"
#define DirBuild64 ".."
#define DirBuildRoot "..\..\..\.."
#define DirMFCUpdater "..\..\..\..\MFCUpdater"
#define DirSidekick "..\..\..\..\Sidekick"
#define DirSource "..\..\..\..\..\plugins\MyFreeCams\Sidekick"
#define DirInstallerSource "{#DirSource}\installer"

;#include "..\..\..\..\build64\plugins\MyFreeCams\Sidekick\libPlugins\build_version.h"
;#include "{#Build64}\libPlugins\build_version.h"

[Setup]
; Use 64-bit install mode
ArchitecturesInstallIn64BitMode=x64

; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{1998E73C-D428-4CA8-AC3A-DC59FF6DE481}
AppName={#MyAppName}
AppVersion={#SIDEKICK_VERSION_STR}
;AppVerName={#MyAppName} {#SIDEKICK_VERSION_STR}
AppPublisher={#MyAppPublisher}
AppCopyright={#MyAppCopyright}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
;DefaultDirName={pf64}\obs-studio
DefaultDirName={code:GetPublicPath}\Sidekick

DefaultGroupName={#MyAppName}
DisableProgramGroupPage=yes
OutputDir={#DirBuildRoot}
OutputBaseFilename=MFC-Sidekick-Setup-{#SIDEKICK_BUILD_DATE}
WizardImageFile={#DirSource}\installer\Resources\setup-splash.bmp
WizardSmallImageFile={#DirSource}\installer\Resources\Sidekick-Splash-Mini-2.bmp
SetupIconFile={#DirSource}\installer\Resources\Sidekick-Icon2.ico
Compression=lzma
SolidCompression=yes
DirExistsWarning=no
UsePreviousAppDir=no
;SignTool=stdsign
;SignTool=signtool
InfoAfterFile={#DirSource}\installer\SidekickSetup.txt

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Files]
Source: "{#DirSidekick}\bin\*"; DestDir: "{code:FindObsDir}\obs-plugins\64bit"; Flags: ignoreversion recursesubdirs
Source: "{#DirSidekick}\cef\*"; DestDir: "{app}\cef"; Flags: ignoreversion recursesubdirs
; Source: "{#DirMFCUpdater}\*"; DestDir: "{code:FindObsDir}\obs-plugins\64bit"; Flags: ignoreversion recursesubdirs
; Source: "{#DirSource}\Resources\MFCUpdater\*"; DestDir: "{code:FindObsDir}\data\obs-plugins\MFCUpdater"; Flags: ignoreversion recursesubdirs

[InstallDelete]
Type: files; Name: "{code:FindObsDir}\obs-plugins\64bit\obs-browser*"

[UninstallDelete]
Type: files; Name: "{app}\cef\*.log"
Type: filesandordirs; Name: "{app}\cef\*"

; function BrowseForFolder(const Prompt: String; var Directory: String; const NewFolderButton: Boolean): Boolean;

[Code]

// global vars
var
  DataDirPage: TInputDirWizardPage;
  ObsDirVal32: String;
  ObsDirVal64: String;
  ObsDirVal: String;
  ObsExe64: String;
  ObsExe32: String;
  ObsExe: String;
  TmpExe: String;
  DefDirVal: String;
  regInstallDir: String;


function SwitchColorFormat(Color: String): TColor;
var
    RR, GG, BB: String;
    Dec: Integer;
begin
    { Change string Color from $RRGGBB to $BBGGRR and then convert to TColor }
    if((Length(Color) <> 7) or (Color[1] <> '$')) then
        Result := $000000
    else
    begin
        RR := Color[2] + Color[3];
        GG := Color[4] + Color[5];
        BB := Color[6] + Color[7];
        Dec := StrToInt('$' + BB + GG + RR);
        Result := TColor(Dec);
    end;
end;


function FindObsDir(Param: String): String;
begin
  ObsDirVal64 := ExpandConstant('{pf64}') + '\obs-studio';
  ObsDirVal32 := ExpandConstant('{pf32}') + '\obs-studio';
  ObsExe64 := 'bin\64bit\obs64.exe';
  ObsExe32 := 'bin\32bit\obs32.exe';
  ObsDirVal := '';
  ObsExe := '';

  // the first exe found will be the default for the install dir of obs
  // to use when pre-populating the OBS Directory page of the wizard, so
  // in the case of both 32bit and 64bit installs both being found, we want
  // to check for 64bit install first -- the first one found will be the one
  // used as the default, so check for 64bit install first in the 64bit installer,
  // and we'll check for the 32-bit install first in the 32bit installer.
  //
  if DirExists(ObsDirVal64) then begin
    TmpExe := ObsDirVal64 + '\' + ObsExe64;
    if FileExists(TmpExe) then begin
      if (ObsExe = '') then begin
         ObsExe := TmpExe;
         Log(Format('<64bit-Obs-EXE> found at "%s"', [ObsExe]));
      end;
      if (ObsDirVal = '') then begin
        ObsDirVal := ObsDirVal64;
        Log(Format('<64bit-Program-Files>/<OBS-install-dir> found in "%s"', [ObsDirVal]));
      end;
    end else begin
      Log(Format('<64bit-ProgramFiles>/<OBS-install-dir>/<path-to-obs-binary>.exe not found at "%s"', [TmpExe]));
    end;
  end else begin
    Log(Format('<64bit-ProgramFiles>/<OBS-install-dir> not found in "%s"', [ObsDirVal64]));
  end;

  if DirExists(ObsDirVal32) then begin
    TmpExe := ObsDirVal32 + '\' + ObsExe32;
    if FileExists(TmpExe) then begin
       if (ObsExe = '') then begin
         ObsExe := TmpExe;
         Log(Format('<32bit-Obs-EXE> found at "%s"', [ObsExe]));
       end;
       if (ObsDirVal = '') then begin
         ObsDirVal := ObsDirVal32;
         Log(Format('<32bit-Program-Files>/<OBS-install-dir> found in "%s"', [ObsDirVal]));
       end;
    end else begin
      Log(Format('<32bit-ProgramFiles>/<OBS-install-dir>/<path-to-obs-binary>.exe not found at "%s"', [TmpExe]));
    end;
  end else begin
    Log(Format('<32bit-ProgramFiles/<OBS-install-dir> not found in "%s"', [ObsDirVal32]));
  end;

  Result := ObsDirVal;
end;


function GetDataDir(Param: String): String;
begin
  { Return the selected DataDir }
  //MsgBox('GetDataDir.', mbError, MB_OK);
  Result := DataDirPage.Values[0];
end;


// custom wizard page setup, for data dir.
procedure InitializeWizard;
begin
  { Taken from CodeDlg.iss example script }
  { Create custom pages to show during install }

  //WizardForm.Color := SwitchColorFormat('$008000');
  //MainForm.Color := SwitchColorFormat('$008000');
  // WizardForm.SurfaceColor := SwitchColorFormat('$008000');
  // MainForm.SurfaceColor := SwitchColorFormat('$008000');
  //WizardForm.MainPanel.Color := SwitchColorFormat('$008000');
  //WizardForm.MainPanel.Font.Color := clWhite;
  // WizardPage.Color := SwitchColorFormat('$008000');
  // Panel.Color := SwitchColorFormat('$008000');

  DataDirPage := CreateInputDirPage(wpSelectDir,
    'Where is OBS currently installed?', '',
    'Please select the location where OBS is installed on this computer.',
    False, '');
  DataDirPage.Add('');

  { Set default values, using settings that were stored last time if possible }
  //if RegQueryStringValue(HKEY_LOCAL_MACHINE, 'SOFTWARE\MyCompanyProg',
  //   'DataDir', DataDirVal) then begin
  //  DataDirPage.Values[0] := DataDirVal;
  //end else
  //  DataDirPage.Values[0] := '{#pf64}\obs-studio';
  // you might replace the previous with this, which is a per-user way
  // to retrieve the previous value:
  //   DataDirPage.Values[0] := GetPreviousData('DataDir', 'C:\MyCompany\data\');

  DataDirPage.Values[0] := FindObsDir('');
end;


// This is needed only if you use GetPreviousData above.
//procedure RegisterPreviousData(PreviousDataKey: Integer);
//begin
//  SetPreviousData(PreviousDataKey, 'DataDir', DataDirPage.Values[0]);
//end;


function DataDirExists(): Boolean;
begin
  { Find out if data dir already exists }
  Result := DirExists(GetDataDir(''));
end;


procedure DoPreInstall();
begin
// MsgBox('Pre Install!', mbInformation, MB_OK);
end;


procedure DoPostInstall();
begin
  if RegWriteStringValue(HKEY_LOCAL_MACHINE, 'SOFTWARE\MyFreeCams\Sidekick', 'InstallDir', ExpandConstant('{app}')) then begin
     Log(Format('SUCCESS writing Sidekick registry path for InstallDir: %s"', [ExpandConstant('{app}')]));
  end else begin
     Log(Format('ERROR writing Sidekick registry path for InstallDir: %s"', [ExpandConstant('{app}')]));
  end;
end;


procedure CurStepChanged(CurStep: TSetupStep);
begin
  if CurStep = ssInstall then begin
    DoPreInstall();
  end else if CurStep = ssPostInstall then begin
    DoPostInstall();
  end;
end;


function GetPublicPath(Param: string): string;
begin
  // First check for PUBLIC env var, i.e. C:\Users\Public
  Result := GetEnv('PUBLIC');
  if Result <> '' then begin
    if DirExists(Result) then begin
      Log(Format('EnvVar for PUBLIC found at "%s"', [Result]));
     end else begin
       // Reset result if we couldnt open the dir
       Result := '';
     end;
  end;

  // If public not set or dir not found, check ALLUSERSPROFILE env var
  if (Result = '') then begin
    Result := GetEnv('ALLUSERSPROFILE');
    if DirExists(Result) then begin
      Log(Format('EnvVar for ALLUSERSPROFILE found at "%s"', [Result]));
    end else begin
      // Reset result if we couldnt open the dir
      Result := '';
    end;
  end;

  // If neither env var was found, default to C:\Users\Public
  if (Result = '') then begin
    DefDirVal := ExpandConstant('{userappdata}');
    Log(Format('EnvVars failed to expand, so using default dir val of "%s"', [DefDirVal]));
    Result := DefDirVal;
  end else begin
    Log(Format('EnvVar mapped OK, using dir val of "%s"', [Result]));
  end;

  regInstallDir := Result;
end;
