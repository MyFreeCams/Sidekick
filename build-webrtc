#!/usr/bin/env bash
set -e # exit if something fails

declare -i IS_DEBUG=0
readonly _DEPOT_TOOLS_COMMIT=master
readonly _WEBRTC_VERSION=90
readonly _BRANCH_NUMBER=4430
readonly ARGS_RELEASE='use_rtti=true is_debug=false is_official_build=true libcxx_abi_unstable=false chrome_pgo_phase=0 rtc_use_h264=true ffmpeg_branding="Chrome" is_chrome_branded=false'
readonly ARGS_DEBUG='use_rtti=true is_debug=true libcxx_abi_unstable=false rtc_use_h264=true ffmpeg_branding="Chrome"'

readonly OBSAGENTS_ROOT="${OBSAGENTS_ROOT:-$(pwd)}"
cd ../../..
readonly OBS_ROOT="${OBS_ROOT:-$(pwd)}"
cd ..
readonly DEV_DIR="${DEV_DIR:-$(pwd)}"

if [ -z ${DEPOT_TOOLS_COMMIT+x} ]; then DEPOT_TOOLS_COMMIT=${_DEPOT_TOOLS_COMMIT}; fi
if [ -z ${WEBRTC_VERSION+x} ]; then WEBRTC_VERSION=${_WEBRTC_VERSION}; fi
if [ -z ${BRANCH_NUMBER+x} ]; then BRANCH_NUMBER=${_BRANCH_NUMBER}; fi
if [ "${BUILD_TYPE}" = "Debug" ]; then IS_DEBUG=1; fi
if [ -z ${WEBRTC_ARGS+x} ]; then
  if [ ${IS_DEBUG} -eq 1 ]; then WEBRTC_ARGS="${ARGS_DEBUG}"; else WEBRTC_ARGS="${ARGS_RELEASE}"; fi
fi
if [ ${WEBRTC_VERSION} -lt 73 ]; then WEBRTC_BRANCH=${WEBRTC_VERSION}; else WEBRTC_BRANCH=m${WEBRTC_VERSION}; fi
if [ ${WEBRTC_VERSION} -gt 79 ]; then WEBRTC_BRANCH=${BRANCH_NUMBER}; fi
if [ -z ${WEBRTC_ROOT_DIR+x} ]; then
  if [ -n "${WEBRTC}" ]; then export WEBRTC_ROOT_DIR="${WEBRTC}"; else export WEBRTC_ROOT_DIR="${DEV_DIR}/webrtc"; fi
fi

declare start
declare end
declare -i start_ts
declare -i end_ts
declare -i runtime
declare -i hours
declare -i minutes
declare -i seconds

init() {
  start=$(date '+%Y-%m-%d %H:%M:%S')
  start_ts=$(date +%s)
  echo "${start}"
  echo
  echo "WebRTC: building m${WEBRTC_VERSION}"
  echo "WebRTC: root: ${WEBRTC_ROOT_DIR}"
  echo "WebRTC: args: ${WEBRTC_ARGS}"
}

checkout_depot_tools_commit() {
  if [ "${DEPOT_TOOLS_COMMIT}" != "master" ]; then
    export DEPOT_TOOLS_UPDATE=0
    cd "${DEV_DIR}/depot_tools"
    git reset --hard
    git checkout -b m"${WEBRTC_VERSION}" "${DEPOT_TOOLS_COMMIT}"
    echo "depot_tools update disabled" > "${DEV_DIR}/depot_tools/.disable_auto_update"
    local file="${DEV_DIR}/depot_tools/update_depot_tools"
    # sed -i '' '1s;^;exit 0  # disabling auto update\$'\n';' "${file}"
    local tmp=$(mktemp)
    {
      echo -e "exit 0  # disabling auto update\n"
      cat "${file}"
    } > "${tmp}"
    mv "${tmp}" "${file}"
    # echo -e "exit 0  # disabling auto update\n$(cat "${file}")" > "${file}"
    git add .
    git commit -m "disable auto update"
  fi
}

install_depot_tools() {
  echo
  echo "Installing depot_tools"
  cd "${DEV_DIR}"
  export DEPOT_TOOLS="${DEV_DIR}/depot_tools"
  if [ -d "${DEPOT_TOOLS}" ]; then rm -rf "${DEPOT_TOOLS}"; fi
  git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git
  export PATH="${PATH}:${DEPOT_TOOLS}"
  echo
  echo "DEPOT_TOOLS: ${DEPOT_TOOLS}"
  gclient > /dev/null
  checkout_depot_tools_commit
}

find_depot_tools() {
  unset gclient_path && unset DEPOT_TOOLS
  local gclient_path="${DEV_DIR}/depot_tools/gclient"
  cd "${DEV_DIR}"
  if [ -f "${gclient_path}" ]; then
    _DEPOT_TOOLS=$(dirname "${gclient_path}")
    export DEPOT_TOOLS=${_DEPOT_TOOLS}
    if [[ ":${PATH}:" != *":${DEPOT_TOOLS}:"* ]]; then
      export PATH="${PATH}:${DEPOT_TOOLS}"
    fi
    echo
    echo "DEPOT_TOOLS: ${DEPOT_TOOLS}"
  else
    install_depot_tools
  fi
}

write_webrtc_version() {
  local file="${WEBRTC_ROOT_DIR}/webrtc_version.h"
  if [ -f "${file}" ]; then rm -f "${file}"; fi
  {
    echo "#ifndef WEBRTC_VERSION_H_"
    echo "#define WEBRTC_VERSION_H_"
    echo
    echo "#ifdef WEBRTC_VERSION"
    echo "#undef WEBRTC_VERSION"
    echo "#endif"
    echo
    echo "#define WEBRTC_VERSION ${WEBRTC_VERSION}"
    echo
    echo "#endif  // WEBRTC_VERSION_H_"
  } >> "${file}"
}

main() {
  init

  if [ "$1" = "clean" ]; then install_depot_tools; else find_depot_tools; fi

  rm -rf "${WEBRTC_ROOT_DIR}"
  mkdir -p "${WEBRTC_ROOT_DIR}/lib"
  mkdir -p "${WEBRTC_ROOT_DIR}/src"
  cd "${WEBRTC_ROOT_DIR}"

  echo "WebRTC: fetching..."
  fetch --nohooks --force webrtc
  cd "${WEBRTC_ROOT_DIR}/src"

  git checkout -f refs/remotes/branch-heads/${WEBRTC_BRANCH}
  gclient sync -f -D -R --with_branch_heads --with_tags
  gn gen out/m${WEBRTC_VERSION} --args="${WEBRTC_ARGS}"
  ninja -C out/m${WEBRTC_VERSION}

  cp "${WEBRTC_ROOT_DIR}/src/out/m${WEBRTC_VERSION}/obj/libwebrtc.a" "${WEBRTC_ROOT_DIR}/lib/"
  cp "${WEBRTC_ROOT_DIR}/src/out/m${WEBRTC_VERSION}/args.gn" "${WEBRTC_ROOT_DIR}/lib/"
  # rsync -avh --prune-empty-dirs --exclude="out" --include="*/" --include="*.h" --exclude="*" ./* "${WEBRTC_ROOT_DIR}/include/"

  write_webrtc_version

  end=$(date '+%Y-%m-%d %H:%M:%S')
  end_ts=$(date +%s)
  runtime=$((end_ts-start_ts))
  hours=$((runtime / 3600))
  minutes=$(( (runtime % 3600) / 60 ))
  seconds=$(( (runtime % 3600) % 60 ))

  echo
  echo "WebRTC: Finished building"
  echo
  echo   "Start:    ${start}"
  echo   "End:      ${end}"
  printf "Elapsed:  (hh:mm:ss) %02d:%02d:%02d\n" ${hours} ${minutes} ${seconds}
}

main "$@"
