#!/usr/bin/env bash

set -e # exit if something fails

readonly _BUILD_DIR=xAuto
readonly _BUILD_TYPE=RelWithDebInfo
# readonly _CEF_VERSION=75.1.14+gc81164e+chromium-75.0.3770.100
# readonly _CEF_VERSION=85.3.12+g3e94ebf+chromium-85.0.4183.121
# readonly _CEF_VERSION=88.2.9+g5c8711a+chromium-88.0.4324.182
readonly _CEF_VERSION=89.0.12+g2b76680+chromium-89.0.4389.90
# readonly MACOS_CEF_BUILD_VERSION=3770
# readonly MACOS_CEF_BUILD_VERSION=4183
# readonly MACOS_CEF_BUILD_VERSION=4324
readonly MACOS_CEF_BUILD_VERSION=4389

readonly _SIDEKICK_ROOT=$(pwd)
export SIDEKICK_ROOT=${_SIDEKICK_ROOT}
export DYLIBBUNDLER="${SIDEKICK_ROOT}/scripts/macdylibbundler/build/dylibbundler"
cd ../../.. || exit
readonly _OBS_ROOT=$(pwd)
export OBS_ROOT=${_OBS_ROOT}
cd .. || exit
readonly _DEV_DIR=$(pwd)
export DEV_DIR="${DEV_DIR:-${_DEV_DIR}}"
export OBSDEPS="${DEV_DIR}/obsdeps"
export QTDIR="${QTDIR:-${OBSDEPS}}"

export BUILD_DIR="${BUILD_DIR:-${_BUILD_DIR}}"
export BUILD_ROOT="${OBS_ROOT}/${BUILD_DIR}"
cd "${BUILD_ROOT}"

if [ -f "${BUILD_ROOT}/CMakeCache.txt" ]; then
  PREV_BUILD_TYPE=$(grep -E 'CMAKE_BUILD_TYPE:[^=]+=' "${BUILD_ROOT}/CMakeCache.txt" | sed -E 's/CMAKE_BUILD_TYPE:[^=]+=//')
fi
readonly _BUILD_TYPE_=${PREV_BUILD_TYPE:-${_BUILD_TYPE}}
export CMAKE_BUILD_TYPE=${BUILD_TYPE:-${_BUILD_TYPE_}}
export BUILD_TYPE=${CMAKE_BUILD_TYPE}
_CEF_BUILD_TYPE=Release
if [ "${BUILD_TYPE}" = "Debug" ]; then _CEF_BUILD_TYPE=Debug; fi
export CEF_BUILD_TYPE=${CEF_BUILD_TYPE:-${_CEF_BUILD_TYPE}}

if [ -f "${BUILD_ROOT}/plugins/MyFreeCams/Sidekick/libPlugins/build_version.h" ]; then
  PREV_GIT_BRANCH=$(grep -E -o 'SIDEKICK_VERSION_GITBRANCH "[^"]+' "${BUILD_ROOT}/plugins/MyFreeCams/Sidekick/libPlugins/build_version.h" | sed -E 's/SIDEKICK_VERSION_GITBRANCH "//')
  PREV_GIT_COMMIT=$(grep -E -o 'SIDEKICK_VERSION_GITCOMMIT "[^"]+' "${BUILD_ROOT}/plugins/MyFreeCams/Sidekick/libPlugins/build_version.h" | sed -E 's/SIDEKICK_VERSION_GITCOMMIT "//')
fi

export CEF_VERSION=${CEF_VERSION:-${_CEF_VERSION}}
export CEF_BUILD_VERSION=${CEF_BUILD_VERSION:-${CEF_VERSION}}

readonly _CEF_DIR="${CEF:-${DEV_DIR}/cef_binary_${CEF_BUILD_VERSION}_macosx64}"
export CEF_ROOT_DIR="${CEF_ROOT_DIR:-${_CEF_DIR}}"
export CEF_ROOT="${CEF_ROOT:-${CEF_ROOT_DIR}}"

export BOOST_ROOT="${BOOST_ROOT:-/usr/local/opt/boost}"
readonly _OPENSSL_DIR="${OPENSSL:-/usr/local/opt/openssl@1.1}"
export OPENSSL_ROOT_DIR="${OPENSSL_ROOT_DIR:-${_OPENSSL_DIR}}"

# Store current xcode path
readonly CURRENT_XCODE=$(xcode-select -p)

if [ -n "${NOTARIZATION_USERNAME}" ]; then NOTARIZING=yes; else NOTARIZING=no; fi
NOTARIZED=no
SIGNING=no
SIGNED=no

readonly red=$'\e[1;31m'
readonly grn=$'\e[1;32m'
readonly blu=$'\e[1;34m'
readonly mag=$'\e[1;35m'
readonly cyn=$'\e[1;36m'
readonly bold=$'\e[1m'
readonly reset=$'\e[0m'

readonly start_ts=$(date +%s)
readonly start=$(date '+%Y-%m-%d %H:%M:%S')
declare end
declare -i end_ts

hr() {
  echo "───────────────────────────────────────────────────"
  echo "$1"
  [ -n "$2" ] && echo "$2"
  [ -n "$3" ] && echo "$3"
  [ -n "$4" ] && echo "$4"
  [ -n "$5" ] && echo "$5"
  [ -n "$6" ] && echo "$6"
  [ -n "$7" ] && echo "$7"
  [ -n "$8" ] && echo "$8"
  [ -n "$9" ] && echo "$9"
  [ -n "${10}" ] && echo "${10}"
  echo "───────────────────────────────────────────────────"
}

fetch_git_tags() {
  cd "${SIDEKICK_ROOT}"
  git fetch --tags
  local -r _GIT_TAG=$(git describe --abbrev=0 --always)
  export GIT_TAG=${_GIT_TAG}
  local -r _GIT_COMMIT=$(git log -1 --format=%h)
  export GIT_COMMIT=${_GIT_COMMIT}
  local -r _GIT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
  export GIT_BRANCH=${_GIT_BRANCH}
  local -r _FILE_DATE=$(date +%Y-%m-%d.%H-%M-%S)
  export FILE_DATE=${_FILE_DATE}
  local -r _YYYYMMDD=$(date +%Y%m%d)
  export YYYYMMDD=${_YYYYMMDD}
  export PACKAGE_LOCATION="${BUILD_ROOT}/MFC-Sidekick-Setup-${YYYYMMDD}.pkg"
  if [ "${BUILD_TYPE}" = "RelWithDebInfo" ] || [ "${BUILD_TYPE}" = "Release" ]; then
    export PACKAGE_WITH_COMMIT_LOCATION="${BUILD_ROOT}/Sidekick-${GIT_BRANCH}-${GIT_COMMIT}-${YYYYMMDD}.pkg"
  else
    export PACKAGE_WITH_COMMIT_LOCATION="${BUILD_ROOT}/Sidekick-${GIT_BRANCH}-${GIT_COMMIT}-${BUILD_TYPE}-${YYYYMMDD}.pkg"
  fi
}

find_codesign_ident() {
  if [ "$1" = "dev" ]; then NO_CODESIGN=1; fi
  if [ -z "${NO_CODESIGN}" ]; then
    CODESIGN_IDENT_FULL=$(security find-identity -p codesigning -v | grep 'Developer ID Application' | grep -Eoe '[A-F0-9]+\s"[^"]+"')
    if [ -z "${CODESIGN_IDENT_FULL}" ] && [ -z "${CODESIGN_IDENT}" ]; then NO_CODESIGN=1; fi
    if [ -z "${NO_CODESIGN}" ]; then
      SIGNING=yes
      export CODESIGN_IDENT=${CODESIGN_IDENT:-$(echo "${CODESIGN_IDENT_FULL}" | grep -Eoe '^[A-F0-9]+')}
      readonly PRODUCTSIGN_IDENT_FULL=$(security find-identity -v | grep 'Developer ID Installer' | grep -Eoe '[A-F0-9]+\s"[^"]+"')
      export PRODUCTSIGN_IDENT=${PRODUCTSIGN_IDENT:-$(echo "${PRODUCTSIGN_IDENT_FULL}" | grep -Eoe '^[A-F0-9]+')}
    fi
  fi
}

print_env() {
  echo "${cyn}Packaging Sidekick${reset}"
  echo
  echo "BUILD_TYPE:              ${BUILD_TYPE}"
  if [ -f "${BUILD_ROOT}/CMakeCache.txt" ]; then
    if [ "${BUILD_TYPE}" != "${PREV_BUILD_TYPE}" ]; then
      echo "PREVIOUS BUILD_TYPE:     ${PREV_BUILD_TYPE}"
    fi
  fi
  echo "${bold}GIT_BRANCH:              ${GIT_BRANCH}${reset}"
  if [ -f "${BUILD_ROOT}/plugins/MyFreeCams/Sidekick/libPlugins/build_version.h" ]; then
    if [ "${GIT_BRANCH}" = "${PREV_GIT_BRANCH}" ]; then
      echo "${bold}PREV_GIT_BRANCH:         ${PREV_GIT_BRANCH}${reset}"
    else
      echo "${mag}PREV_GIT_BRANCH:         ${PREV_GIT_BRANCH}${reset}"
    fi
  fi
  echo "${bold}GIT_COMMIT:              ${GIT_COMMIT}${reset}"
  if [ -f "${BUILD_ROOT}/plugins/MyFreeCams/Sidekick/libPlugins/build_version.h" ]; then
    if [ "${GIT_COMMIT}" = "${PREV_GIT_COMMIT}" ]; then
      echo "PREV_GIT_COMMIT:         ${PREV_GIT_COMMIT}"
    else
      echo "${mag}PREV_GIT_COMMIT:         ${PREV_GIT_COMMIT}${reset}"
    fi
  fi
  echo
  echo "BUILD_ROOT:              ${BUILD_ROOT}"
  echo "OBS_ROOT:                ${OBS_ROOT}"
  echo "DEV_DIR:                 ${DEV_DIR}"
  echo
  echo "Signing?                 ${SIGNING}"
  echo "Notarizing?              ${NOTARIZING}"
  if [ -z "${NO_CODESIGN}" ]; then
    echo
    echo "CODESIGN_IDENT_FULL:     ${CODESIGN_IDENT_FULL}"
    echo "CODESIGN_IDENT:          ${CODESIGN_IDENT}"
    echo "PRODUCTSIGN_IDENT_FULL:  ${PRODUCTSIGN_IDENT_FULL}"
    echo "PRODUCTSIGN_IDENT:       ${PRODUCTSIGN_IDENT}"
  fi
}

create_directories() {
  mkdir -p ./OBS.app/Contents/MacOS
  mkdir -p ./OBS.app/Contents/Plugins
  mkdir -p ./OBS.app/Contents/Resources
  mkdir -p ./OBS.app/Contents/Frameworks
}

copy_files() {
  cp -R ./rundir/${BUILD_TYPE}/bin/ ./OBS.app/Contents/MacOS/
  cp -R ./rundir/${BUILD_TYPE}/data ./OBS.app/Contents/Resources/
  cp -R ./rundir/${BUILD_TYPE}/obs-plugins/ ./OBS.app/Contents/Plugins/
  cp -pf "${SIDEKICK_ROOT}/scripts/install/osx/AppIcon.icns" ./OBS.app/Contents/Resources/
  cp -pf "${SIDEKICK_ROOT}/scripts/install/osx/OBSPublicDSAKey.pem" ./OBS.app/Contents/Resources/
  cp -pf "${SIDEKICK_ROOT}/scripts/install/osx/Info.plist" ./OBS.app/Contents/
  plutil -insert CFBundleVersion -string "$GIT_TAG" ./OBS.app/Contents/Info.plist
  plutil -insert CFBundleShortVersionString -string "$GIT_TAG" ./OBS.app/Contents/Info.plist
  plutil -insert SUPublicDSAKeyFile -string OBSPublicDSAKey.pem ./OBS.app/Contents/Info.plist
}

move_scripting_plugins() {
  # Scripting plugins (obslua & obspython) are required to be placed in same directory as binary
  if [ -d ./OBS.app/Contents/Resources/data/obs-scripting ]; then
    for f in ./OBS.app/Contents/Resources/data/obs-scripting/*; do
      mv "$f" ./OBS.app/Contents/MacOS/
    done
    rm -rf ./OBS.app/Contents/Resources/data/obs-scripting
  fi
}

bundle_dylibs_fix_install_names() {
  local -a plugins
  for f in ./OBS.app/Contents/Plugins/*.*; do
    plugins+=( ./OBS.app/Contents/Plugins/${f##*/} )
  done
  for f in ./OBS.app/Contents/MacOS/*; do
    plugins+=( ./OBS.app/Contents/MacOS/${f##*/} )
  done
  if [ ${MACOS_CEF_BUILD_VERSION} -le 3770 ]; then
    plugins+=( ./OBS.app/Contents/PlugIns/obs-browser-page )
  fi

  # Fix install names & rpaths on dependencies and bundle dylibs
  ${DYLIBBUNDLER} -f -q -cd -of -a ./OBS.app "${plugins[@]/#/-x }"

  find ./OBS.app -name .gitignore -exec rm -f \{\} \;
  rm -f ./OBS.app/Contents/MacOS/libobs.0.dylib 2> /dev/null
  rm -f ./OBS.app/Contents/MacOS/libobs-frontend-api.dylib 2> /dev/null
  rm -f ./OBS.app/Contents/MacOS/libobs-scripting.dylib 2> /dev/null
  mv -f ./OBS.app/Contents/MacOS/libobs-opengl.so ./OBS.app/Contents/Frameworks
}

copy_qtnetwork() {
  # Copy QtNetwork for plugin support
  cp -pfR "${QTDIR}/lib/QtNetwork.framework" ./OBS.app/Contents/Frameworks/
  chmod -R +w ./OBS.app/Contents/Frameworks/QtNetwork.framework
  chmod 644 ./OBS.app/Contents/Frameworks/QtNetwork.framework/Versions/5/Resources/Info.plist
  rm -rf ./OBS.app/Contents/Frameworks/QtNetwork.framework/Versions/5/Headers
  rm -rf ./OBS.app/Contents/Frameworks/QtNetwork.framework/Headers
  install_name_tool -id \
    @rpath/QtNetwork \
    ./OBS.app/Contents/Frameworks/QtNetwork.framework/Versions/5/QtNetwork
  install_name_tool -change \
    "${QTDIR}/lib/QtCore.framework/Versions/5/QtCore" \
    @executable_path/../Frameworks/QtCore.framework/Versions/5/QtCore \
    ./OBS.app/Contents/Frameworks/QtNetwork.framework/Versions/5/QtNetwork
}

copy_cef() {
  if [ -f ./rundir/${BUILD_TYPE}/obs-plugins/obs-browser.so ]; then
    hr "Copying Chromium Embedded Framework (CEF)"
    cp -pfR "${CEF_ROOT}/${CEF_BUILD_TYPE}/Chromium Embedded Framework.framework" ./OBS.app/Contents/Frameworks/
  fi
}

build_obs_bundle() {
  create_directories
  copy_files
  move_scripting_plugins
  bundle_dylibs_fix_install_names
  copy_qtnetwork
  copy_cef
}

# build_obs_bundle() {
#   cd "${BUILD_ROOT}"
#   rm -rf ./OBS.app 2> /dev/null
#   mkdir -p ./OBS.app/Contents/MacOS
#   mkdir -p ./OBS.app/Contents/Plugins
#   mkdir -p ./OBS.app/Contents/Resources
#   mkdir -p ./OBS.app/Contents/Frameworks

#   cp -R ./rundir/${BUILD_TYPE}/bin/ ./OBS.app/Contents/MacOS/
#   cp -R ./rundir/${BUILD_TYPE}/data ./OBS.app/Contents/Resources/
#   cp -R ./rundir/${BUILD_TYPE}/obs-plugins/ ./OBS.app/Contents/Plugins/

#   cp -pf "${SIDEKICK_ROOT}/scripts/install/osx/Info.plist" ./OBS.app/Contents/
#   cp -pf "${SIDEKICK_ROOT}/scripts/install/osx/AppIcon.icns" ./OBS.app/Contents/Resources/

#   # Scripting plugins (obslua & obspython) are required to be placed in same directory as binary
#   if [ -d ./OBS.app/Contents/Resources/data/obs-scripting ]; then
#     for f in ./OBS.app/Contents/Resources/data/obs-scripting/*; do
#       mv "$f" ./OBS.app/Contents/MacOS/
#     done
#     rm -rf ./OBS.app/Contents/Resources/data/obs-scripting
#   fi

#   for f in ./OBS.app/Contents/Plugins/*.*; do
#     PLUGINS+="-x ./OBS.app/Contents/Plugins/${f##*/} "
#   done

#   for f in ./OBS.app/Contents/MacOS/*.so; do
#     PLUGINS+="-x ./OBS.app/Contents/MacOS/${f##*/} "
#   done

#   if [ -f ./OBS.app/Contents/MacOS/obs-ffmpeg-mux ]; then PLUGINS+="-x ./OBS.app/Contents/MacOS/obs-ffmpeg-mux "; fi
#   # if [ -f ./OBS.app/Contents/MacOS/libobs-opengl.so ]; then PLUGINS+="-x ./OBS.app/Contents/MacOS/libobs-opengl.so "; fi
#   # if [ -f ./OBS.app/Contents/MacOS/obslua.so ]; then PLUGINS+="-x ./OBS.app/Contents/MacOS/obslua.so "; fi
#   # if [ -f ./OBS.app/Contents/MacOS/_obspython.so ]; then PLUGINS+="-x ./OBS.app/Contents/MacOS/_obspython.so "; fi

#   # Fix install names & rpaths on dependencies and bundle dylibs
#   ${DYLIBBUNDLER} -f -q -cd -of -a ./OBS.app ${PLUGINS}

#   set +e
#   find ./OBS.app -name .gitignore -exec rm -f \{\} \;
#   rm -f ./OBS.app/Contents/MacOS/libobs.0.dylib 2> /dev/null
#   rm -f ./OBS.app/Contents/MacOS/libobs-frontend-api.dylib 2> /dev/null
#   rm -f ./OBS.app/Contents/MacOS/libobs-scripting.dylib 2> /dev/null
#   # rm -f ./OBS.app/Contents/MacOS/*.dylib 2> /dev/null
#   # rm -f ./OBS.app/Contents/MacOS/libobsglad.0.dylib 2> /dev/null
#   mv -f ./OBS.app/Contents/MacOS/libobs-opengl.so ./OBS.app/Contents/Frameworks

#   # Copy QtNetwork for plugin support
#   cp -pfR "${QTDIR}/lib/QtNetwork.framework" ./OBS.app/Contents/Frameworks/
#   chmod -R +w ./OBS.app/Contents/Frameworks/QtNetwork.framework
#   chmod 644 ./OBS.app/Contents/Frameworks/QtNetwork.framework/Versions/5/Resources/Info.plist
#   rm -rf ./OBS.app/Contents/Frameworks/QtNetwork.framework/Versions/5/Headers
#   rm -rf ./OBS.app/Contents/Frameworks/QtNetwork.framework/Headers
#   install_name_tool -id \
#     @rpath/QtNetwork \
#     ./OBS.app/Contents/Frameworks/QtNetwork.framework/Versions/5/QtNetwork
#   install_name_tool -change \
#     "${QTDIR}/lib/QtCore.framework/Versions/5/QtCore" \
#     @executable_path/../Frameworks/QtCore.framework/Versions/5/QtCore \
#     ./OBS.app/Contents/Frameworks/QtNetwork.framework/Versions/5/QtNetwork

#   # Copy Chromium Embedded Framework (CEF) to app bundle
#   if [ -f ./rundir/${BUILD_TYPE}/obs-plugins/obs-browser.so ]; then
#     hr "Copying Chromium Embedded Framework (CEF)"
#     cp -pfR "${CEF_ROOT}/${CEF_BUILD_TYPE}/Chromium Embedded Framework.framework" ./OBS.app/Contents/Frameworks/
#   fi

#   cp -pf "${SIDEKICK_ROOT}/scripts/install/osx/OBSPublicDSAKey.pem" ./OBS.app/Contents/Resources/
#   plutil -insert CFBundleVersion -string "$GIT_TAG" ./OBS.app/Contents/Info.plist
#   plutil -insert CFBundleShortVersionString -string "$GIT_TAG" ./OBS.app/Contents/Info.plist
#   plutil -insert SUPublicDSAKeyFile -string OBSPublicDSAKey.pem ./OBS.app/Contents/Info.plist
# }

prepare_files_for_package() {
  cd "${BUILD_ROOT}"
  mkdir -p "${BUILD_ROOT}/MFCBroadcast/bin"
  cp -pf "${BUILD_ROOT}/OBS-Sidekick.app/Contents/Plugins/MFCBroadcast.so" "${BUILD_ROOT}/MFCBroadcast/bin/"
  cp -pf "${BUILD_ROOT}/OBS-Sidekick.app/Contents/Frameworks/websocketclient.dylib" "${BUILD_ROOT}/MFCBroadcast/bin/"
  cp -pf "${BUILD_ROOT}/OBS-Sidekick.app/Contents/Frameworks/libx264"* "${BUILD_ROOT}/MFCBroadcast/bin/"
  cp -pf "${BUILD_ROOT}/OBS-Sidekick.app/Contents/Frameworks/libssl"* "${BUILD_ROOT}/MFCBroadcast/bin/"
  cp -pf "${BUILD_ROOT}/OBS-Sidekick.app/Contents/Frameworks/libcrypto"* "${BUILD_ROOT}/MFCBroadcast/bin/"
  if [ -f "${BUILD_ROOT}/OBS-Sidekick.app/Contents/Frameworks/libipc.dylib" ]; then
    cp -pf "${BUILD_ROOT}/OBS-Sidekick.app/Contents/Frameworks/libipc.dylib" "${BUILD_ROOT}/MFCBroadcast/bin/"
  fi
  for f in "${BUILD_ROOT}/MFCBroadcast/bin/"*; do
    for g in "${BUILD_ROOT}/MFCBroadcast/bin/"*; do
      install_name_tool -change \
        "@executable_path/../Frameworks/${f##*/}" \
        "@loader_path/${f##*/}" \
        "${BUILD_ROOT}/MFCBroadcast/bin/${g##*/}"
    done
  done
  if [ -f "${BUILD_ROOT}/MFC-Sidekick-Setup-${YYYYMMDD}.pkg" ]; then
    rm -f "${BUILD_ROOT}/MFC-Sidekick-Setup-${YYYYMMDD}.pkg"
  fi
  if [ -f "${BUILD_ROOT}/MFC-Sidekick-Setup-${GIT_BRANCH}-${GIT_COMMIT}-${YYYYMMDD}.pkg" ]; then
    rm -f "${BUILD_ROOT}/MFC-Sidekick-Setup-${GIT_BRANCH}-${GIT_COMMIT}-${YYYYMMDD}.pkg"
  fi
}

# Example: codesign_app appNameNoExtension /full/path/to/containing/directory
codesign_app() {
  hr "Code Signing $1.app"
  cd "$2"
  /usr/bin/xattr -crs "./$1.app"
  if [ -d "./$1.app/Contents/Frameworks/Chromium Embedded Framework.framework" ]; then
    local helpers="${OBS_ROOT}/CI/scripts/macos/helpers"
    local frameworks="./$1.app/Contents/Frameworks"
    local cef_path="${frameworks}/Chromium Embedded Framework.framework"
    for f in "${cef_path}/Libraries/"*.dylib; do
      echo "* code signing $f"
      codesign --force --options runtime --sign "${CODESIGN_IDENT:--}" "$f"
    done
    echo "* code signing $cef_path"
    codesign --force --options runtime --sign "${CODESIGN_IDENT:--}" --deep "${cef_path}"
  fi
  for f in "${frameworks}/"*Helper.app; do
    echo "* code signing $f"
    codesign --force --options runtime --sign "${CODESIGN_IDENT:--}" --deep "$f"
  done
  for f in "${frameworks}/"*Helper*GPU*.app; do
    echo "* code signing $f"
    codesign --force --options runtime --entitlements "${helpers}/helper-gpu-entitlements.plist" --sign "${CODESIGN_IDENT:--}" --deep "$f"
  done
  for f in "${frameworks}/"*Helper*Plugin*.app; do
    echo "* code signing $f"
    codesign --force --options runtime --entitlements "${helpers}/helper-plugin-entitlements.plist" --sign "${CODESIGN_IDENT:--}" --deep "$f"
  done
  for f in "${frameworks}/"*Helper*Renderer*.app; do
    echo "* code signing $f"
    codesign --force --options runtime --entitlements "${helpers}/helper-renderer-entitlements.plist" --sign "${CODESIGN_IDENT:--}" --deep "$f"
  done
  if [ -d "./$1.app/Contents/Resources/data/obs-mac-virtualcam.plugin" ]; then
    echo "* code signing $f"
    codesign --force --options runtime --deep --sign "${CODESIGN_IDENT:--}" "./$1.app/Contents/Resources/data/obs-mac-virtualcam.plugin"
  fi
  echo "* code signing $1.app"
  codesign --force --options runtime --entitlements "${OBS_ROOT}/CI/scripts/macos/app/entitlements.plist" --sign "${CODESIGN_IDENT:--}" --deep "./$1.app"
  codesign -dvv "./$1.app"
}

codesign_apps() {
  if [ -z "${NO_CODESIGN}" ]; then
    codesign_app MFCCefLogin "${BUILD_ROOT}/plugins/MyFreeCams/Sidekick/MFCCefLogin"
    # codesign_app OBS "${BUILD_ROOT}"
    # codesign_app OBS-Sidekick "${BUILD_ROOT}"

    hr "Code Signing MFC Broadcast Plugin"
    for f in "${BUILD_ROOT}/MFCBroadcast/bin/"*; do
      echo "* code signing $f"
      codesign --force --options runtime --sign "${CODESIGN_IDENT:--}" "$f"
    done
  fi
}

generate_package() {
  hr "Generating Installation Package"
  packagesbuild "${BUILD_ROOT}/sidekick.pkgproj"
}

codesign_package() {
  if [ -z "${NO_CODESIGN}" ]; then
    hr "Code Signing Package"
    mv "${BUILD_ROOT}/Sidekick.pkg" "${BUILD_ROOT}/Sidekick-unsigned.pkg"
    productsign --sign "${PRODUCTSIGN_IDENT:--}" "${BUILD_ROOT}/Sidekick-unsigned.pkg" "${BUILD_ROOT}/Sidekick.pkg"
    # Validate signature
    if pkgutil --check-signature "${BUILD_ROOT}/Sidekick.pkg"; then SIGNED=yes; fi
  fi
}

notarize_package() {
  if [ -z "${NO_CODESIGN}" ]; then
    if [ -n "${NOTARIZATION_USERNAME}" ]; then
      if [ -n "${NOTARIZATION_PASSWORD}" ]; then
        xcrun altool --store-password-in-keychain-item "AC_PASSWORD" -u "${NOTARIZATION_USERNAME}" -p "${NOTARIZATION_PASSWORD}"
      fi
      echo "Notarization precheck - started"
      if xcnotary precheck "${BUILD_ROOT}/Sidekick.pkg"; then
        echo "Notarization precheck - success"
        if [ -n "${ASC_PROVIDER_SHORTNAME}" ]; then
          ASC_PROVIDER_SHORTNAME=$(xcrun altool --list-providers -p "@keychain:AC_PASSWORD" 2>/dev/null | grep -Eoe '[a-zA-Z0-9]+\s+[a-f0-9]+-[a-f0-9]+-[a-f0-9]+-[a-f0-9]+-[a-f0-9]+' | grep -Eoe '^[a-zA-Z0-9]+')
        fi
        hr "Notarizing Package"
        xcnotary notarize "${BUILD_ROOT}/Sidekick.pkg" --developer-account "${NOTARIZATION_USERNAME}" --developer-password-keychain-item "AC_PASSWORD" --provider "${ASC_PROVIDER_SHORTNAME}"
        # System Policy (Gatekeeper) assessment
        if spctl -a -v --type install "${BUILD_ROOT}/Sidekick.pkg"; then NOTARIZED=yes; fi
      else
        echo "Notarization precheck - failed"
        return 1
      fi
    fi
  fi
}

cleanup() {
  set +e
  cp -pf "${BUILD_ROOT}/Sidekick.pkg" "${PACKAGE_WITH_COMMIT_LOCATION}"
  cp -pf "${BUILD_ROOT}/Sidekick.pkg" "${PACKAGE_LOCATION}"
  # Restore previously selected Xcode
  local DEFAULT_XCODE=$(xcode-select -p)
  if [ "${DEFAULT_XCODE}" != "${CURRENT_XCODE}" ]; then
    echo "Restoring previous Xcode"
    sudo xcode-select --switch "${CURRENT_XCODE}"
  fi
  # rm -rf "${BUILD_ROOT}/OBS-Sidekick.app"
  rm -f "${BUILD_ROOT}/OBS.app/Contents/Plugins/MFCBroadcast.so" 2> /dev/null
  rm -f "${BUILD_ROOT}/OBS.app/Contents/Plugins/websocketclient.dylib" 2> /dev/null
  rm -f "${BUILD_ROOT}/OBS.app/Contents/Frameworks/websocketclient.dylib" 2> /dev/null
}

print_summary() {
  end=$(date '+%Y-%m-%d %H:%M:%S')
  end_ts=$(date +%s)
  runtime=$((end_ts-start_ts))
  hours=$((runtime / 3600))
  minutes=$(( (runtime % 3600) / 60 ))
  seconds=$(( (runtime % 3600) % 60 ))

  hr "Finished Building Sidekick"

  echo
  echo "${bold}Package location:${reset}"
  echo "${PACKAGE_LOCATION}"
  echo
  echo "BUILD_TYPE:            ${BUILD_TYPE}"
  echo "${red}GIT_BRANCH:            ${GIT_BRANCH}${reset}"
  echo "${bold}GIT_COMMIT:            ${GIT_COMMIT}${reset}"
  echo
  echo "Signed?                ${SIGNED}"
  echo "Notarized?             ${NOTARIZED}"
  echo
  echo   "Start:                 ${start}"
  echo   "End:                   ${end}"
  printf "Elapsed:               (hh:mm:ss) %02d:%02d:%02d\n" ${hours} ${minutes} ${seconds}
}

main() {
  fetch_git_tags
  find_codesign_ident "$@"
  print_env
  sudo xcode-select --reset

  hr "Compiling MacDylibBundler"
  (cd "${SIDEKICK_ROOT}/scripts/macdylibbundler" && mkdir -p build && cd build && cmake .. && make)

  hr "Building MFC CEF Login App Bundle"
  ${DYLIBBUNDLER} -f -q -cd -of -a "${BUILD_ROOT}/plugins/MyFreeCams/Sidekick/MFCCefLogin/MFCCefLogin.app"

  hr "Building OBS App Bundle"
  (build_obs_bundle)

  # cd "${BUILD_ROOT}"

  # Create copy to use for Sidekick Installer packaging
  rm -rf "${BUILD_ROOT}/OBS-Sidekick.app"
  cp -pfR "${BUILD_ROOT}/OBS.app" "${BUILD_ROOT}/OBS-Sidekick.app"

  prepare_files_for_package
  codesign_apps
  generate_package
  codesign_package
  notarize_package
  cleanup
  print_summary

  exit 0
}

main "$@"
